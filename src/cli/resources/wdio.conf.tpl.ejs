require('ts-node/register');
const allure = require('allure-commandline');
const fse = require('fs-extra');
const path = require('path');
const { table, getBorderCharacters } = require('table');
const { addAttachment } = require('@wdio/allure-reporter').default;

const ALLURE_RAW_DIR = path.join(<%- JSON.stringify(answers.reportOutDir) %>, 'allure');
const ALLURE_HTML_DIR = path.join(ALLURE_RAW_DIR, 'report');

exports.config = {
  //
  // ====================
  // Runner Configuration
  // ====================
  //
  // WebdriverIO allows it to run your tests in arbitrary locations (e.g. locally or
  // on a remote machine).
  runner: 'local',
  <% if(answers.browserstackEnabled) { %>
  //
  // =================
  // Service Providers
  // =================
  // WebdriverIO supports Sauce Labs, Browserstack, and Testing Bot (other cloud providers
  // should work too though). These services define specific user and key (or access key)
  // values you need to put in here in order to connect to these services.
  //
  user: '<%= answers.user %>',
  key: '<%= answers.key %>',
  <% if(answers.browserstackLocal) { %>
  browserstackLocal: true,
  browserstackLocalForcedStop: true,
  browserstackOpts: {
    key: '<%= answers.key %>',
    onlyAutomate: true,
  },
  <% } %>
  //
  // If you run your tests on SauceLabs you can specify the region you want to run your tests
  // in via the `region` property. Available short handles for regions are `us` (default) and `eu`.
  // These regions are used for the Sauce Labs VM cloud and the Sauce Labs Real Device Cloud.
  // If you don't provide the region it will default for the `us`
  <% } else { %>
  //
  // =====================
  // Server Configurations
  // =====================
  // Host address of the running Selenium server. This information is usually obsolete as
  // WebdriverIO automatically connects to localhost. Also, if you are using one of the
  // supported cloud services like Sauce Labs, Browserstack, or Testing Bot you don't
  // need to define host and port information because WebdriverIO can figure that out
  // according to your user and key information. However, if you are using a private Selenium
  // backend you should define the host address, port, and path here.
  //
  hostname: 'localhost',
  port: 4444,
  path: '/wd/hub',
  <% } %>
  //
  // ==================
  // Specify Test Files
  // ==================
  // Define which test specs should run. The pattern is relative to the directory
  // from which `wdio` was called. Notice that, if you are calling `wdio` from an
  // NPM script (see https://docs.npmjs.com/cli/run-script) then the current working
  // directory is where your package.json resides, so `wdio` will be called from there.
  //
  specs: [
    <%- answers.specs.map(i => JSON.stringify(i)) %>
  ],
  // Patterns to exclude.
  exclude: [
    // 'path/to/excluded/files'
  ],
  //
  // ============
  // Capabilities
  // ============
  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same
  // time. Depending on the number of capabilities, WebdriverIO launches several test
  // sessions. Within your capabilities you can overwrite the spec and exclude options in
  // order to group specific specs to a specific capability.
  //
  // First, you can define how many instances should be started at the same time. Let's
  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have
  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec
  // files and you set maxInstances to 10, all spec files will get tested at the same time
  // and 30 processes will get spawned. The property handles how many capabilities
  // from the same test should run tests.
  //
  maxInstances: <%= answers.debugEnabled ? 1 : answers.maxInstances %>,
  //
  // If you have trouble getting all important capabilities together, check out the
  // Sauce Labs platform configurator - a great tool to configure your capabilities:
  // https://docs.saucelabs.com/reference/platforms-configurator
  //
  capabilities: [
    // maxInstances can get overwritten per capability. So if you have an in-house Selenium
    // grid with only 5 firefox instances available you can make sure that not more than
    // 5 instances get started at a time.
    <%- answers.debugEnabled ? JSON.stringify({ browserName: 'chrome' }) : answers.capabilities.map(e => JSON.stringify(e)) %>
    // Sample capability for firefox
    // {
    //   maxInstances: 10,
    //   browserName: 'firefox',
    //   'moz:firefoxOptions': { args: ['-headless'] }
    // }
    // Sample capability for BrowserStack
    // {
    //   maxInstances: 5,
    //   browserName: "chrome",
    //   "bstack:options": {
    //     projectName: "project-name",
    //     buildName: "build-name",
    //     os: "Windows",
    //     osVersion: "10",
    //     resolution: "1920x1080",
    //     timezone: "Singapore"
    //   },
    //   "goog:chromeOptions": {
    //     args: ["--disable-web-security", "--incognito"]
    //   }
    // }
    // If outputDir is provided WebdriverIO can capture driver session logs
    // it is possible to configure which logTypes to include/exclude.
    // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs
    // excludeDriverLogs: ['bugreport', 'server'],
    //
  ],
  //
  // ===================
  // Test Configurations
  // ===================
  // Define all options that are relevant for the WebdriverIO instance here
  //
  // Level of logging verbosity: trace | debug | info | warn | error | silent
  logLevel: '<%= answers.logLevel %>',
  //
  // Set specific log levels per logger
  // loggers:
  // - webdriver, webdriverio
  // - @wdio/applitools-service, @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service
  // - @wdio/mocha-framework, @wdio/jasmine-framework
  // - @wdio/local-runner, @wdio/lambda-runner
  // - @wdio/sumologic-reporter
  // - @wdio/cli, @wdio/config, @wdio/sync, @wdio/utils
  // Level of logging verbosity: trace | debug | info | warn | error | silent
  logLevels: {
    webdriver: '<%= answers.logLevel === 'trace' ? answers.logLevel : 'silent' %>',
  },
  //
  // If you only want to run your tests until a specific amount of tests have failed use
  // bail (default is 0 - don't bail, run all tests).
  bail: <%= answers.bail %>,
  //
  // Set a base URL in order to shorten url command calls. If your `url` parameter starts
  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.
  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url
  // gets prepended directly.
  baseUrl: '<%= answers.baseUrl %>',
  //
  // Default timeout for all waitFor* commands.
  waitforTimeout: <%= answers.waitforTimeout %>,
  //
  // Default request retries count
  connectionRetryCount: 3,
  //
  // Test runner services
  // Services take over a specific job you don't want to take care of. They enhance
  // your test setup with almost no effort. Unlike plugins, they don't add new
  // commands. Instead, they hook themselves up into the test process.
  services: [
    'intercept',
    <%- answers.browserstackEnabled ? 'browserstack' :
    JSON.stringify(['selenium-standalone', { installArgs: answers.seleniumInstallArgs, args: answers.seleniumInstallArgs }]) %>,
    [
      'image-comparison',
      {
        screenshotPath: <%- JSON.stringify(answers.comparable.imageCompare.outputDir) %>,
        baselineFolder: <%- JSON.stringify(answers.comparable.imageCompare.baselineDir) %>,
        actualFolder: <%- JSON.stringify(answers.comparable.imageCompare.actualDir) %>,
        diffFolder: <%- JSON.stringify(answers.comparable.imageCompare.diffDir) %>,
        formatImageName: '{tag}',
      }
    ]
  ],
  // Framework you want to run your specs with.
  // The following are supported: Mocha, Jasmine, and Cucumber
  // see also: https://webdriver.io/docs/frameworks.html
  //
  // Make sure you have the wdio adapter package for the specific framework installed
  // before running any tests.
  framework: 'cucumber',
  //
  // The number of times to retry the entire specfile when it fails as a whole
  specFileRetries: <%= answers.specFileRetries %>,
  //
  // Test reporter for stdout.
  reporters: [
    'spec',
    [
      'junit',
      {
        outputDir: path.join(<%- JSON.stringify(answers.reportOutDir) %>, 'junit'),
        outputFileFormat: (options) => `wdio-${options.cid}-junit-reporter.xml`
      }
    ],
    [
      'allure',
      {
        disableWebdriverStepsReporting: true,
        disableWebdriverScreenshotsReporting: false,
        useCucumberStepReporter: true,
        outputDir: ALLURE_RAW_DIR,
        htmlDir: ALLURE_HTML_DIR
      }
    ]
  ],
  cucumberOpts: {
    // <string[]> (file/dir) require files before executing features
    require: [
      <%- answers.steps.map(i => JSON.stringify(i)) %>
    ],
    // <string[]> ("extension:module") require files with the given EXTENSION after requiring MODULE (repeatable)
    requireModule: [
      'tsconfig-paths/register', () => { require('ts-node').register({ files: true }) }
    ],
    // <boolean> show full backtrace for errors
    backtrace: false,
    // <boolean> disable colors in formatter output
    colors: true,
    // <boolean> invoke formatters without executing steps
    dryRun: false,
    // <boolean> abort the run on first failure
    failFast: false,
    // <string[]> (type[:path]) specify the output format, optionally supply PATH to redirect formatter output (repeatable)
    format: ['pretty'],
    // <boolean> Enable this config to treat undefined definitions as warnings.
    ignoreUndefinedDefinitions: false,
    // <string[]> (name) specify the profile to use
    profile: [],
    // <boolean> hide source uris
    source: true,
    // <boolean> fail if there are any undefined or pending steps
    strict: false,
    // <boolean> hide step definition snippets for pending steps
    snippets: true,
    // <string> (expression) only execute the features or scenarios with tags matching the expression
    tagExpression: '<%= answers.tags %>',
    // <number> timeout for step definitions
    timeout: <%= answers.debugEnabled ? (24 * 60 * 60 * 1000) : answers.stepTimeout %>,
  },
  //
  // ==============
  // Customizations
  // ==============
  comparable: <%- JSON.stringify(answers.comparable) %>,
  custom: <%- JSON.stringify(answers.custom) %>,
  directory: <%- JSON.stringify(answers.directory) %>,
  locale: '<%- answers.locale %>',
  pages: [<%- answers.pages.map(i => JSON.stringify(i)) %>],
  allureHtmlDir: ALLURE_HTML_DIR,
  //
  // =====
  // Hooks
  // =====
  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance
  // it and to build services around it. You can either apply a single function or an array of
  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got
  // resolved to continue.
  /**
   * Gets executed once before all workers get launched.
   * @param {Object} config wdio configuration object
   * @param {Array.<Object>} capabilities list of capabilities details
   */
  onPrepare: function (config, capabilities) {
    try {
      Object.keys(config.comparable).forEach(key => {
        fse.removeSync(config.comparable[key].actualDir);
        fse.removeSync(config.comparable[key].diffDir);
        fse.mkdirsSync(config.comparable[key].baselineDir)
      })
      fse.removeSync(<%- JSON.stringify(answers.reportOutDir) %>);
    } catch(e) {
      throw new Error(e);
    }
  },
  /**
   * Gets executed just before initialising the webdriver session and test framework. It allows you
   * to manipulate configurations depending on the capability or spec.
   * @param {Object} config wdio configuration object
   * @param {Array.<Object>} capabilities list of capabilities details
   * @param {Array.<String>} specs List of spec file paths that are to be run
   */
  // beforeSession: function (config, capabilities, specs) {
  // },
  /**
   * Gets executed before test execution begins. At this point you can access to all global
   * variables like `browser`. It is the perfect place to define custom commands.
   * @param {Array.<Object>} capabilities list of capabilities details
   * @param {Array.<String>} specs List of spec file paths that are to be run
   */
  before: function (capabilities, specs) {
    <% if (answers.hooks.before) { %>
    const hook = require('<%= answers.hooks.before %>').default;
    hook(capabilities, specs);
    <% } %>
  },
  /**
   * Runs before a WebdriverIO command gets executed.
   * @param {String} commandName hook command name
   * @param {Array} args arguments that command would receive
   */
  // beforeCommand: function (commandName, args) {
  // },
  /**
   * Runs before a Cucumber feature
   */
  beforeFeature: function (uri, feature, scenarios) {
    <% if (answers.hooks.beforeFeature) { %>
    const hook = require('<%= answers.hooks.beforeFeature %>').default;
    hook(uri, feature, scenarios);
    <% } %>
  },
  /**
   * Runs before a Cucumber scenario
   */
  beforeScenario: function (uri, feature, scenario, sourceLocation) {
    <% if (answers.hooks.beforeScenario) { %>
    const hook = require('<%= answers.hooks.beforeScenario %>').default;
    hook(uri, feature, scenario, sourceLocation);
    <% } %>
  },
  /**
   * Runs before a Cucumber step
   */
  beforeStep: function ({ uri, feature, step }, context) {
    // for some reason 'step' seem to give the entire thing (including uri, feature, step, and then some) ¯\_(ツ)_/¯
    const stepArg = step.step.argument;
    const data = [];

    if(stepArg) {
      if(stepArg.type === 'DataTable') {
        stepArg.rows.forEach(row => {
          data.push(row.cells.map(cell => cell.value));
        });
        addAttachment('DataTable', table(data, { border: getBorderCharacters('norc') }), 'text/plain');
      } else if (stepArg.type === 'DocString') {
        addAttachment('DocString', stepArg.content, 'text/plain');
      }
    }

    <% if (answers.hooks.beforeStep) { %>
    const hook = require('<%= answers.hooks.beforeStep %>').default;
    hook({ uri, feature, step }, context);
    <% } %>
  },
  /**
   * Runs after a Cucumber step
   */
  afterStep: function ({ uri, feature, step }, context, { error, result, duration, passed, retries }) {
    if (error !== undefined) {
      browser.takeScreenshot();
    }

    <% if (answers.hooks.afterStep) { %>
    const hook = require('<%= answers.hooks.afterStep %>').default;
    hook({ uri, feature, step }, context, { error, result, duration, passed, retries });
    <% } %>
  },
  /**
   * Runs after a Cucumber scenario
   */
  afterScenario: function (uri, feature, scenario, result, sourceLocation) {
    <% if (answers.hooks.afterScenario) { %>
    const hook = require('<%= answers.hooks.afterScenario %>').default;
    hook(uri, feature, scenario, result, sourceLocation);
    <% } %>
  },
  /**
   * Runs after a Cucumber feature
   */
  afterFeature: function (uri, feature, scenarios) {
    <% if (answers.hooks.afterFeature) { %>
    const hook = require('<%= answers.hooks.afterFeature %>').default;
    hook(uri, feature, scenarios);
    <% } %>
  },
  /**
   * Runs after a WebdriverIO command gets executed
   * @param {String} commandName hook command name
   * @param {Array} args arguments that command would receive
   * @param {Number} result 0 - command success, 1 - command error
   * @param {Object} error error object if any
   */
  // afterCommand: function (commandName, args, result, error) {
  // },
  /**
   * Gets executed after all tests are done. You still have access to all global variables from
   * the test.
   * @param {Number} result 0 - test pass, 1 - test fail
   * @param {Array.<Object>} capabilities list of capabilities details
   * @param {Array.<String>} specs List of spec file paths that ran
   */
  after: function (result, capabilities, specs) {
    <% if (answers.hooks.after) { %>
    const hook = require('<%= answers.hooks.after %>').default;
    hook(result, capabilities, specs);
    <% } %>
  },
  /**
   * Gets executed right after terminating the webdriver session.
   * @param {Object} config wdio configuration object
   * @param {Array.<Object>} capabilities list of capabilities details
   * @param {Array.<String>} specs List of spec file paths that ran
   */
  // afterSession: function (config, capabilities, specs) {
  // },
  /**
   * Gets executed after all workers got shut down and the process is about to exit. An error
   * thrown in the onComplete hook will result in the test run failing.
   * @param {Object} exitCode 0 - success, 1 - fail
   * @param {Object} config wdio configuration object
   * @param {Array.<Object>} capabilities list of capabilities details
   * @param {<Object>} results object containing test results
   */
  onComplete: function(exitCode, config, capabilities, results) {
    allure(['-q', 'generate', ALLURE_RAW_DIR, '-c', '-o', ALLURE_HTML_DIR]);
  },
  /**
  * Gets executed when a refresh happens.
  * @param {String} oldSessionId session ID of the old session
  * @param {String} newSessionId session ID of the new session
  */
  // onReload: function(oldSessionId, newSessionId) {
  // }
};
